"""
Как известно, функция map() принимает функцию и итерируемый объект и возвращает итератор, элементами которого являются
    элементы итерируемого объекта, к которым была применена переданная функция. Нередко элементами итерируемого объекта
    являются коллекции (списки, кортежи, ..), тогда внутри переданной функции нам приходится обращаться к каждому
    элементу этих коллекций по индексу. Например:

    persons = [('Timur', 'Guev'), ('Arthur', 'Kharisov')]

    full_names = map(lambda tup: tup[0] + ' ' + tup[1], persons)

Было бы удобно иметь функцию, назовем ее starmap(), которая бы принимала функцию не с одним аргументом,
    а с несколькими — каждым элементом коллекции:

    persons = [('Timur', 'Guev'), ('Arthur', 'Kharisov')]

    full_names = starmap(lambda name, surname: f'{name} {surname}', persons)

Реализуйте функцию starmap() с использованием функции map(), которая принимает два аргумента:

    func — функция
    iterable — итерируемый объект, элементами которого являются коллекции

Функция starmap() должна работать аналогично функции map(), то есть возвращать итератор, элементами которого являются
    элементы итерируемого объекта iterable, к которым была применена функция func, с единственным отличием: func должна
    принимать не один аргумент — коллекцию (элемент iterable), а каждый элемент этой коллекции в качестве
    самостоятельного аргумента.
"""


def starmap(func, iterable):
    for x in iterable:
        yield func(*x)


# INPUT DATA:

# TEST_1:
print('\nтест 1')
pairs = [(1, 3), (2, 5), (6, 4)]

print(*starmap(lambda a, b: a + b, pairs))

# TEST_2:
print('\nтест 2')
points = [(1, 1, 1), (1, 1, 2), (2, 2, 3)]

print(*starmap(lambda x, y, z: x * y * z, points))

# TEST_3:
print('\nтест 3')
points = [(1, 1, 1, 0), (1, 1, 2, 0), (2, 2, 3, 10)]

print(*starmap(lambda x, y, z, t: x + y + z + t, points))

# TEST_4:
print('\nтест 4')
points = [[10], [-9], [2]]

print(*starmap(lambda x: x ** 2, points))

# TEST_5:
print('\nтест 5')
points = [(1, 1, 1, 0, 90),
          (1, 1, 2, 0, 67),
          (2, 2, 3, 10, -56),
          (5, 21, 3, 10, -56),
          (6, 24, 35, 100, 36),
          (8, 34, 3, 10, 56)]

print(*starmap(lambda x, y, z, t, w: x + y * z + t + w ** 6, points))
