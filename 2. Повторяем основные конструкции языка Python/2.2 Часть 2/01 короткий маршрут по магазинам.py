# Сегодня Тимур ждёт в гости своего друга Артура, чтобы спланировать работу по новому курсу "ООП на Python".
# Чтобы подготовиться к встрече, Тимуру необходимо посетить два магазина, расположенных рядом с его домом.
# От дома до первого магазина ведёт дорожка длиной d1​ метров, а до второго магазина ведёт дорожка длиной d2 метров.
# Также существует дорожка, соединяющая два магазина друг с другом, длиной d3​ метров.
#
# Напишите программу, которая вычисляет минимальное расстояние, которое потребуется пройти Тимуру, чтобы посетить оба
# магазина и вернуться домой. Тимур всегда стартует из дома. Он должен посетить оба магазина, перемещаясь только по
# имеющимся трём дорожкам, и вернуться назад домой. При этом его совершенно не смутит, если ему придётся посетить
# один и тот же магазин или пройти по одной и той же дорожке более одного раза.
# Единственная его задача — минимизировать суммарное пройденное расстояние.
#
# Формат входных данных
# На вход программе подаются 3 натуральных числа  d1, d2, d3 — длины дорожек, каждое на отдельной строке:
#
#     d1 — длина дорожки, соединяющая дом Тимура и первый магазин
#     d2​ — длина дорожки, соединяющая дом Тимура и второй магазин
#     d3​ — длина дорожки, соединяющая магазины
#
# Формат выходных данных
# Программа должна вывести минимальное количество метров, которое придётся пройти Тимуру,
# чтобы посетить оба магазина и вернуться домой.


d1, d2, d3 = [int(input()) for _ in range(3)]

print(min([
        d1 + d2 + d3,
        d1 * 2 + d2 * 2,
        d1 * 2 + d3 * 2,
        d2 * 2 + d3 * 2,
    ]))


def test(num_test, input1, input2, input3, correct_answer):
    result = min([
        input1 + input2 + input3,
        input1 * 2 + input2 * 2,
        input1 * 2 + input3 * 2,
        input2 * 2 + input3 * 2,
    ])
    print(f'''Тест {num_test}: {"Верно" if result == correct_answer else "Провально"}''')


# INPUT DATA:

# TEST_1:
test(1, 10, 20, 30, 60)

# TEST_2:
test(2, 10, 10, 45, 40)

# TEST_3:
test(3, 100, 33, 34, 134)

# TEST_4:
test(4, 777, 777, 777, 2331)

# TEST_5:
test(5, 2, 2, 8, 8)

# TEST_6:
test(6, 12, 34, 56, 92)

# TEST_7:
test(7, 789, 101112, 131415, 203802)

# TEST_8:
test(8, 27485716, 99999999, 35182, 55041796)

# TEST_9:
test(9, 1, 293548, 5, 12)

# TEST_10:
test(10, 12059, 259855, 5874875, 543828)

# TEST_11:
test(11, 46981, 105809, 585858, 305580)

# TEST_12:
test(12, 9889, 1221, 2442, 7326)

# TEST_13:
test(13, 100500, 200600, 300700, 601800)

# TEST_14:
test(14, 318476, 318476, 318476, 955428)

# TEST_15:
test(15, 23985, 3353, 75633, 54676)

# TEST_16:
test(16, 120, 1298, 2222, 2836)

# TEST_17:
test(17, 98437, 23487, 666672, 243848)

# TEST_18:
test(18, 100000000, 100000000, 100000000, 300000000)

# TEST_19:
test(19, 2, 5, 2, 8)

# TEST_20:
test(20, 1, 1000, 1, 4)

# TEST_21:
test(21, 1, 100000000, 1, 4)
