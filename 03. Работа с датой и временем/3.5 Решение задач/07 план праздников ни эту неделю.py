# Дан список сотрудников организации, в котором указаны их фамилии, имена и даты рождения.
# Напишите программу, которая определяет самого молодого сотрудника, празднующего свой день рождения в течение
# ближайших семи дней от текущей даты.
#
# Формат входных данных
# На вход программе в первой строке подается текущая дата в формате DD.MM.YYYY, в следующей строке вводится натуральное
# число n — количество сотрудников, работающих в организации. В последующих n строках вводятся данные о каждом
# сотруднике: имя, фамилия и дата рождения, разделённые пробелом. Дата рождения указывается в формате DD.MM.YYYY.
#
# Формат выходных данных
# Программа должна определить самого молодого сотрудника, празднующего свой день рождения в течение ближайших семи
# дней, и вывести его имя и фамилию, разделив пробелом. Если таких сотрудников нет, программа должна вывести текст:
#
# Дни рождения не планируются
#
# Примечание 1. Гарантируется, что у всех сотрудников даты рождения различны.
#
# Примечание 2. Например, для даты 01.11.2021 ближайшими семью днями являются:
#
# 02.11.2021, 03.11.2021, 04.11.2021, 05.11.2021, 06.11.2021, 07.11.2021, 08.11.2021

from datetime import datetime, timedelta

dict_of_coworker = {}
pattern = "%d.%m.%Y"
this_day = datetime.strptime(input(), pattern)
week = [this_day + timedelta(days=i) for i in range(1, 8)]
week = [(current_date.day, current_date.month) for current_date in week]
for _ in range(int(input())):
    string = input()
    dict_of_coworker.setdefault(datetime.strptime(string[-10:], pattern), []).append(string[:-11])
birthdays = {key: value for key, value in dict_of_coworker.items() if (key.day, key.month) in week}
if birthdays:
    print(*dict_of_coworker[max(birthdays)])
else:
    print("Дни рождения не планируются")
